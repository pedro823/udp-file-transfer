This makes sense if you think about it. Ruby is one process running inside a larger system, so to speak to other systems or files, it has to speak in a common way that all the processes and systems on the computer can understand. That "common way" of communicating between different elements of the operating system is called I/O. Specifically, files are read and written using I/O Streams.

Streams have a "cursor," which keeps track of which line of a file you last read. When you callFile#readin the above examples, it reads from the cursor's current location (which is the beginning of the file when first opened) until the end of the file. At the end of this operation, the cursor is at the end of the file, so you would have to reset the cusor to the beginning of the file in order to read again. Otherwise, the "read" operation just picks up where it left off, at the end of the file. Fortunately, you can move the cursor back to the beginning of the file by using the methodFile#rewind.
